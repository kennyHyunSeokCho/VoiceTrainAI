// 🎚️ 데시벨 임계값 설정을 관리하는 모델 클래스
// 하드코딩된 최적화된 임계값을 사용하여 안정적인 음성 감지를 제공합니다.
// 
// 기존에는 사용자가 UI를 통해 임계값을 조정할 수 있었지만,
// 더 안정적이고 예측 가능한 동작을 위해 테스트된 최적값들을 하드코딩했습니다.

import 'package:flutter/foundation.dart';

/// 오디오 임계값 설정을 관리하는 모델 클래스
/// 
/// 이 클래스는 음성 인식을 위한 데시벨 임계값들을 관리합니다.
/// 하드코딩된 최적값을 사용하여 안정적인 음성 감지를 제공하며,
/// 복잡한 UI 조정 없이도 효과적인 배경 잡음 필터링이 가능합니다.
/// 
/// 주요 임계값들:
/// - 음성 감지 임계값(60dB): 일반적인 대화 수준의 소리만 음성으로 인식
/// - 무음 감지 임계값(35dB): 완전한 침묵 상태를 감지
class AudioThresholdSettings with ChangeNotifier {
  
  // === 하드코딩된 최적화 값들 ===
  // 실제 테스트를 통해 검증된 최적의 임계값들입니다.
  // 이 값들은 다양한 환경에서 테스트되어 가장 효과적인 음성 인식을 제공합니다.
  
  /// 음성 감지를 위한 데시벨 임계값: 60dB
  /// 
  /// 60dB는 일반적인 대화 수준의 소리로, 다음과 같은 특징이 있습니다:
  /// - 명확한 음성은 감지하되 배경 잡음은 차단
  /// - 에어컨, 팬 소음 등 일반적인 배경 소음을 효과적으로 필터링
  /// - 너무 민감하지 않아 작은 잡음에 반응하지 않음
  /// - 너무 둔감하지 않아 정상적인 목소리는 모두 감지
  static const double _VOICE_THRESHOLD = 60.0;
  
  /// 완전한 무음 감지를 위한 임계값: 35dB
  /// 
  /// 35dB는 매우 조용한 환경에서의 무음 상태를 감지합니다:
  /// - 거의 완전한 침묵 상태 감지
  /// - 매우 작은 배경 소음도 무음으로 처리하지 않음
  /// - 사용자가 말을 멈췄을 때 정확히 감지
  static const double _SILENCE_THRESHOLD = 35.0;
  
  /// 임계값 필터링 활성화 여부: 항상 true
  /// 
  /// 하드코딩된 시스템에서는 항상 임계값 필터링이 활성화됩니다.
  /// 이는 더 안정적이고 일관된 음성 인식 성능을 제공합니다.
  static const bool _IS_ENABLED = true;
  
  // === 현재 상태 변수들 ===
  
  /// 현재 감지된 오디오 레벨 (실시간 업데이트)
  /// 
  /// 이 값은 AudioLevelMonitor에서 100ms마다 업데이트되며,
  /// 마이크로 입력되는 실시간 소리의 데시벨 레벨을 나타냅니다.
  /// 범위: 일반적으로 20dB(매우 조용함) ~ 90dB(매우 큰 소리)
  double _currentLevel = 20.0;

  // === Getter들 - 외부에서 설정값을 읽기 위한 프로퍼티들 ===
  
  /// 음성 감지를 위한 데시벨 임계값을 반환 (하드코딩됨: 60dB)
  /// 
  /// 이 값은 변경할 수 없으며, 테스트를 통해 검증된 최적값입니다.
  /// 60dB 이상의 소리만 "음성"으로 인식되어 녹음에 포함됩니다.
  /// 
  /// 예시:
  /// - 60dB 이상: 일반적인 대화, 명확한 음성 → 녹음됨
  /// - 60dB 미만: 배경 잡음, 작은 소음 → 녹음되지 않음
  double get threshold => _VOICE_THRESHOLD;
  
  /// 완전한 무음 감지를 위한 임계값을 반환 (하드코딩됨: 35dB)
  /// 
  /// 이 값 이하의 소리는 "무음 상태"로 간주됩니다.
  /// 사용자가 말을 완전히 멈췄을 때를 감지하는 데 사용됩니다.
  /// 
  /// 예시:
  /// - 35dB 이하: 거의 완전한 침묵 → 무음 상태
  /// - 35dB 초과: 어떤 형태든 소음 존재 → 무음 아님
  double get silenceThreshold => _SILENCE_THRESHOLD;
  
  /// 임계값 필터링 활성화 여부를 반환 (항상 true)
  /// 
  /// 하드코딩된 시스템에서는 임계값 필터링이 항상 활성화되어 있어
  /// 사용자가 별도로 설정을 변경할 필요가 없습니다.
  bool get isEnabled => _IS_ENABLED;
  
  /// 현재 감지된 오디오 레벨을 반환 (실시간 업데이트)
  /// 
  /// 이 값은 100ms마다 업데이트되며, UI에서 실시간 레벨 바를 
  /// 표시하는 데 사용됩니다. 단위는 데시벨(dB)입니다.
  double get currentLevel => _currentLevel;
  
  /// 현재 오디오 레벨이 음성 임계값을 넘었는지 확인
  /// 
  /// 현재 입력되는 소리가 60dB 이상인지 확인하여
  /// "음성"으로 판단할지 결정합니다.
  /// 
  /// 반환값:
  /// - true: 현재 소리가 60dB 이상 → 음성으로 인식됨
  /// - false: 현재 소리가 60dB 미만 → 배경 잡음으로 처리됨
  bool get isAboveThreshold {
    return _currentLevel > _VOICE_THRESHOLD;
  }
  
  /// 현재 오디오 레벨이 무음 상태인지 확인
  /// 
  /// 현재 입력되는 소리가 35dB 이하인지 확인하여
  /// "무음 상태"인지 판단합니다.
  /// 
  /// 반환값:
  /// - true: 현재 소리가 35dB 이하 → 거의 완전한 무음
  /// - false: 현재 소리가 35dB 초과 → 어떤 형태든 소음 존재
  bool get isSilent {
    return _currentLevel <= _SILENCE_THRESHOLD;
  }
  
  /// 임계값과 현재 레벨의 차이를 데시벨 단위로 반환
  /// 
  /// 현재 소리가 음성 임계값(60dB)보다 얼마나 크거나 작은지
  /// 수치로 확인할 수 있습니다.
  /// 
  /// 반환값:
  /// - 양수: 현재 레벨이 임계값보다 큼 (예: +5dB = 65dB 입력 중)
  /// - 음수: 현재 레벨이 임계값보다 작음 (예: -10dB = 50dB 입력 중)
  /// - 0에 가까움: 현재 레벨이 임계값과 비슷함
  double get levelDifference => _currentLevel - _VOICE_THRESHOLD;

  // === 설정 변경 메서드들 ===
  
  /// 현재 오디오 레벨을 업데이트합니다 (내부적으로 사용)
  /// 
  /// 이 메서드는 AudioLevelMonitor에서 호출되어 실시간으로
  /// 마이크 입력 레벨을 업데이트합니다.
  /// 
  /// [level]: 새로운 오디오 레벨 (데시벨 단위)
  ///          일반적으로 20dB(매우 조용함) ~ 90dB(매우 큰 소리) 범위
  void updateCurrentLevel(double level) {
    // 값이 실제로 변경되었을 때만 UI 업데이트 알림
    // 이렇게 하면 불필요한 UI 재렌더링을 방지할 수 있습니다
    if (_currentLevel != level) {
      _currentLevel = level;
      notifyListeners(); // UI에 실시간 업데이트 알림
    }
  }

  // === 유틸리티 메서드들 ===
  
  /// 설정을 기본값으로 초기화합니다 (하드코딩된 값이므로 실제 변화 없음)
  /// 
  /// 하드코딩된 시스템에서는 임계값 자체는 변경되지 않으며,
  /// 현재 레벨만 초기값(20dB)으로 리셋됩니다.
  void reset() {
    _currentLevel = 20.0; // 현재 레벨을 조용한 상태로 리셋
    notifyListeners();
    print('🎚️ 임계값 설정 초기화 (하드코딩된 값: ${_VOICE_THRESHOLD}dB)');
  }
  
  /// 현재 설정을 Map으로 변환 (하드코딩된 값들 포함)
  /// 
  /// 이 메서드는 설정 정보를 저장하거나 디버깅할 때 유용합니다.
  /// 하드코딩된 값들이므로 항상 같은 값이 반환됩니다.
  /// 
  /// 반환값: {
  ///   'threshold': 60.0,           // 음성 감지 임계값
  ///   'silenceThreshold': 35.0,    // 무음 감지 임계값  
  ///   'isEnabled': true,           // 항상 활성화됨
  /// }
  Map<String, dynamic> toJson() {
    return {
      'threshold': _VOICE_THRESHOLD,
      'silenceThreshold': _SILENCE_THRESHOLD,
      'isEnabled': _IS_ENABLED,
    };
  }
  
  /// 사용자 친화적인 현재 레벨 설명을 반환
  /// 
  /// 숫자 데시벨 값을 일반 사용자가 이해하기 쉬운 
  /// 한국어 설명으로 변환합니다.
  /// 
  /// 반환 예시:
  /// - "매우 조용함" (30dB 이하)
  /// - "조용함" (31-45dB)
  /// - "보통" (46-60dB) 
  /// - "큰 소리" (61-75dB)
  /// - "매우 큰 소리" (76dB 이상)
  String get levelDescription {
    if (_currentLevel <= 30) return "매우 조용함";
    if (_currentLevel <= 45) return "조용함";
    if (_currentLevel <= 60) return "보통";
    if (_currentLevel <= 75) return "큰 소리";
    return "매우 큰 소리";
  }
  
  /// 현재 하드코딩된 임계값 설정에 대한 사용자 친화적인 설명
  /// 
  /// 개발자가 선택한 하드코딩된 임계값의 의미와 장점을
  /// 사용자가 이해하기 쉽게 설명합니다.
  String get thresholdDescription {
    return "최적화된 음성 감지 (${_VOICE_THRESHOLD.toInt()}dB)\n배경 잡음 차단, 명확한 음성만 녹음";
  }
  
  /// 현재 음성 상태에 대한 직관적인 설명과 이모지
  /// 
  /// 현재 입력되는 소리 상태를 이모지와 함께 설명하여
  /// 사용자가 한눈에 상황을 파악할 수 있게 합니다.
  /// 
  /// 반환 예시:
  /// - "🔇 무음 상태" (35dB 이하)
  /// - "🎤 음성 감지됨" (60dB 이상)
  /// - "🔊 배경음 (음성 아님)" (35dB 초과 60dB 미만)
  String get voiceStatusDescription {
    if (isSilent) return "🔇 무음 상태";
    if (isAboveThreshold) return "🎤 음성 감지됨";
    return "🔊 배경음 (음성 아님)";
  }
} 